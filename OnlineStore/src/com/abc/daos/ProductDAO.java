package com.abc.daos;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

import com.abc.connectiondb.ConnectionDB;
import com.abc.model.ProductModel;

public class ProductDAO {

	Connection conn = null;
	Statement stmt = null;

	public void createProduct(ProductModel product) {
		
		int autoGeneratedID;
		try {
			conn = ConnectionDB.getConnection();
			stmt = conn.createStatement();
			String sql = "insert into products (id, name, type, status, created_date) "
					+ " values ( "
					+ product.getId()
					+ ",'"
					+ product.getName()
					+ "','"
					+ product.getType().getId()
					+ "','"
					+ product.getStatus()
					+ "','"
					+ new java.sql.Date(System.currentTimeMillis()) + "')";

			PreparedStatement pstmt = conn.prepareStatement(sql,
					Statement.RETURN_GENERATED_KEYS);
			pstmt.executeUpdate();
			ResultSet keys = pstmt.getGeneratedKeys();
			keys.next();
			autoGeneratedID = keys.getInt(1);
			product.setId(autoGeneratedID);
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			// finally block used to close resources
			try {
				if (stmt != null)
					conn.close();
			} catch (SQLException se) {
			}// do nothing
			try {
				if (conn != null)
					conn.close();
			} catch (SQLException se) {
				se.printStackTrace();
			}// end finally try
		}
	}

	public ProductModel getProduct(ProductModel product) {
		ResultSet rs = null;
		ProductModel getProduct = null;
		try {
			conn = ConnectionDB.getConnection();
			stmt = conn.createStatement();
			String sql = "select * from products where id = " + product.getId();

			rs = stmt.executeQuery(sql);
			if (rs.next()) {
				getProduct = new ProductModel(rs.getInt("id"),
						rs.getString("name"), rs.getInt("type"),
						rs.getInt("status"));
			}

		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			// finally block used to close resources
			try {
				if (stmt != null)
					conn.close();
			} catch (SQLException se) {
			}// do nothing
			try {
				if (conn != null)
					conn.close();
			} catch (SQLException se) {
				se.printStackTrace();
			}// end finally try
		}

		return getProduct;
	}

	public ArrayList<ProductModel> getProductList() {
		ResultSet rs = null;
		ArrayList<ProductModel> productsList = new ArrayList<ProductModel>();
		ProductModel product = null;
		try {
			conn = ConnectionDB.getConnection();
			stmt = conn.createStatement();
			String sql = "select id, name, type, status from products ";
			rs = stmt.executeQuery(sql);
			while (rs.next()) {
				product = new ProductModel(rs.getInt("id"),
						rs.getString("name"), rs.getInt("type"),
						rs.getInt("status"));
				/*
				 * UserTypeModel type = new UserTypeModel();
				 * type.setId(rs.getInt("typeid"));
				 * type.setName(rs.getString("typename")); user.setType(type);
				 */
				productsList.add(product);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			// finally block used to close resources
			try {
				if (stmt != null)
					conn.close();
			} catch (SQLException se) {
			}// do nothing
			try {
				if (conn != null)
					conn.close();
			} catch (SQLException se) {
				se.printStackTrace();
			}// end finally try
		}
		return productsList;
	}

	public ProductModel getProductById(int id) {
		ResultSet rs = null;
		ProductModel product = null;
		try {
			conn = ConnectionDB.getConnection();
			stmt = conn.createStatement();
			String sql = "select * from products where id = " + id;
			rs = stmt.executeQuery(sql);
			if (rs.next()) {
				product = new ProductModel(rs.getInt("id"),
						rs.getString("name"), rs.getInt("type"),
						rs.getInt("status"));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			// finally block used to close resources
			try {
				if (stmt != null)
					conn.close();
			} catch (SQLException se) {
			}// do nothing
			try {
				if (conn != null)
					conn.close();
			} catch (SQLException se) {
				se.printStackTrace();
			}// end finally try
		}
		return product;
	}

	public ArrayList<ProductModel> getProductByType(int id) {
		ResultSet rs = null;
		ArrayList<ProductModel> productsList = new ArrayList<ProductModel>();
		ProductModel product = null;
		try {
			conn = ConnectionDB.getConnection();
			stmt = conn.createStatement();
			String sql = "select * from products where type =" + id;
			rs = stmt.executeQuery(sql);
			while (rs.next()) {
				product = new ProductModel(rs.getInt("id"),
						rs.getString("name"), rs.getInt("type"),
						rs.getInt("status"));
				/*
				 * UserTypeModel type = new UserTypeModel();
				 * type.setId(rs.getInt("typeid"));
				 * type.setName(rs.getString("typename")); user.setType(type);
				 */
				productsList.add(product);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			// finally block used to close resources
			try {
				if (stmt != null)
					conn.close();
			} catch (SQLException se) {
			}// do nothing
			try {
				if (conn != null)
					conn.close();
			} catch (SQLException se) {
				se.printStackTrace();
			}// end finally try
		}
		return productsList;
	}

	public void updateProduct(ProductModel product) {
		try {
			conn = ConnectionDB.getConnection();
			stmt = conn.createStatement();
			String sql = "update products set" + " name = '"
					+ product.getName() 
					+ "', type = '"
					+ product.getType().getId() 
					+ "', status = '"
					+ product.getStatus() 
					+ "' where id = " 
					+ product.getId();
			stmt.executeUpdate(sql);

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			// finally block used to close resources
			try {
				if (stmt != null)
					conn.close();
			} catch (SQLException se) {
			}// do nothing
			try {
				if (conn != null)
					conn.close();
			} catch (SQLException se) {
				se.printStackTrace();
			}// end finally try
		}
	}

	public void deleteProduct(ProductModel product) {
		try {
			conn = ConnectionDB.getConnection();
			stmt = conn.createStatement();
			String sql = "delete from products where id = " + product.getId();
			stmt.executeUpdate(sql);

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			// finally block used to close resources
			try {
				if (stmt != null)
					conn.close();
			} catch (SQLException se) {
			}// do nothing
			try {
				if (conn != null)
					conn.close();
			} catch (SQLException se) {
				se.printStackTrace();
			}// end finally try
		}
	}

}
